import streamlit as st
import pandas as pd
import json
import os
import glob
from datetime import datetime
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np # Added missing import for np.corrcoef

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="ÏãúÏÑ† Î∂ÑÏÑù Í≤∞Í≥º",
    page_icon="üìä",
    layout="wide"
)

# CSS Ïä§ÌÉÄÏùºÎßÅ
st.markdown("""
        <style>
            .main-header {
                font-size: 2.8rem;
                font-weight: 700;
                text-align: center;
                color: #2c3e50;
                margin-bottom: 3rem;
                text-shadow: 1px 1px 2px rgba(0,0,0,0.05);
                letter-spacing: -0.5px;
            }
            .metric-container {
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 1.5rem;
                border-radius: 20px;
                margin: 1.5rem 0;
                border: 1px solid #dee2e6;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }
            .encouragement-box {
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                color: white;
                padding: 2rem;
                border-radius: 20px;
                text-align: center;
                margin: 3rem 0;
                box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
                border: none;
            }
            .trend-section {
                background: #ffffff;
                padding: 2rem;
                border-radius: 20px;
                margin: 2rem 0;
                box-shadow: 0 4px 15px rgba(0,0,0,0.08);
                border: 1px solid #f1f3f4;
            }
            .detail-button {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 1rem 2rem;
                border-radius: 50px;
                font-weight: 600;
                font-size: 1.1rem;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                transition: all 0.3s ease;
            }
            .detail-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);
            }
        </style>
""", unsafe_allow_html=True)

def load_latest_results():
    """ÏµúÍ∑º Í≤∞Í≥º ÌååÏùºÎì§ÏùÑ Î°úÎìúÌïòÍ≥† Î∂ÑÏÑù"""
    try:
        # Data_V2/eye_tracking_data Ìè¥ÎçîÏóêÏÑú ÏµúÍ∑º ÌååÏùºÎì§ Ï∞æÍ∏∞ (Ïä§ÌÅ¨Î¶ΩÌä∏ Í∏∞Ï§Ä Í≤ΩÎ°ú)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        data_folder = os.path.normpath(os.path.join(base_dir, "..", "Data_V2", "eye_tracking_data"))
        if not os.path.exists(data_folder):
            return None, "Îç∞Ïù¥ÌÑ∞ Ìè¥ÎçîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
        
        # ÎÖÑ-Ïõî Ìè¥ÎçîÎì§ Ï∞æÍ∏∞
        month_folders = glob.glob(os.path.join(data_folder, "*/"))
        if not month_folders:
            return None, "Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§."
        
        # Í∞ÄÏû• ÏµúÍ∑º Ïõî Ìè¥Îçî Ï∞æÍ∏∞
        latest_month = max(month_folders, key=os.path.getctime)
        
        # Ìï¥Îãπ Ïõî Ìè¥ÎçîÏóêÏÑú ÏµúÍ∑º ÌååÏùºÎì§ Ï∞æÍ∏∞
        json_files = glob.glob(os.path.join(latest_month, "*.json"))
        csv_files = glob.glob(os.path.join(latest_month, "*.csv"))
        
        if not json_files and not csv_files:
            return None, "Î∂ÑÏÑùÌï† Îç∞Ïù¥ÌÑ∞ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§."
        
        # Í∞ÄÏû• ÏµúÍ∑º ÌååÏùºÎì§ Î∂ÑÏÑù
        results = []
        
        # JSON ÌååÏùºÎì§ Î∂ÑÏÑù (Í∞ÄÏû• ÏµúÍ∑º Í≤ÉÎ∂ÄÌÑ∞)
        json_files.sort(key=os.path.getctime, reverse=True)
        for json_file in json_files:
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    # Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Í≤ÄÏ¶ù (ÏïÑÏù¥Ìä∏ÎûòÌÇπ ÌÖåÏä§Ìä∏Ïö©)
                    has_reaction_times = 'reaction_times' in data and len(data['reaction_times']) > 0
                    has_eye_sync_scores = 'eye_sync_scores' in data and len(data['eye_sync_scores']) > 0
                    has_movement_data = 'total_movements' in data
                    
                    # Î∂ÑÏÑù Í∞ÄÎä•Ìïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞Îßå Ï∂îÍ∞Ä
                    if has_reaction_times or has_eye_sync_scores or has_movement_data:
                        results.append(data)
                        
            except Exception as e:
                continue
        
        # CSV ÌååÏùºÎì§ Î∂ÑÏÑù (Í∞ÄÏû• ÏµúÍ∑º Í≤ÉÎ∂ÄÌÑ∞)
        csv_files.sort(key=os.path.getctime, reverse=True)
        for csv_file in csv_files:
            try:
                df = pd.read_csv(csv_file)
                if not df.empty:
                    # CSV Îç∞Ïù¥ÌÑ∞Î•º Í≤∞Í≥º ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò (ÏïÑÏù¥Ìä∏ÎûòÌÇπ ÌÖåÏä§Ìä∏Ïö©)
                    result = {
                        'timestamp': os.path.basename(csv_file).split('_')[2].split('.')[0],
                        'total_frames': len(df),
                        'eye_sync_scores': df['eye_sync_score'].tolist() if 'eye_sync_score' in df.columns else [],
                        'reaction_times': df['reaction_time'].dropna().tolist() if 'reaction_time' in df.columns else []
                    }
                    results.append(result)
            except Exception as e:
                continue
        
        if not results:
            return None, "Î∂ÑÏÑùÌï† Ïàò ÏûàÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§."
        
        return results, None
        
    except Exception as e:
        return None, f"Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò: {str(e)}"

def calculate_metrics(results):
    """Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÏßÄÌëú Í≥ÑÏÇ∞"""
    if not results:
        return None
    
    # Í∞ÄÏû• ÏµúÍ∑º Í≤∞Í≥º ÏÇ¨Ïö©
    latest_result = results[0]  # Ïù¥ÎØ∏ Ï†ïÎ†¨ÎêòÏñ¥ ÏûàÏùå (ÏµúÏã†Ïù¥ 0Î≤àÏß∏)
    
    metrics = {}
    
    # 1. Î†àÏù¥ÌÑ¥Ïãú (Î∞òÏùë ÏÜçÎèÑ) - ÏïÑÏù¥Ìä∏ÎûòÌÇπ Î∞òÏùë ÏãúÍ∞ÑÏúºÎ°ú Í≥ÑÏÇ∞
    if 'reaction_times' in latest_result and len(latest_result['reaction_times']) > 0:
        reaction_times = latest_result['reaction_times']
        avg_reaction_time = sum(reaction_times) / len(reaction_times)
        
        # 0.3Ï¥à Ïù¥Ìïò: Ï†ïÏÉÅ(1.0), 1Ï¥à Ïù¥ÏÉÅ: ÎπÑÏ†ïÏÉÅ(0.0)
        if avg_reaction_time <= 0.3:
            latency_score = 1.0
        elif avg_reaction_time >= 1.0:
            latency_score = 0.0
        else:
            latency_score = 1.0 - ((avg_reaction_time - 0.3) / 0.7)
        metrics['latency'] = max(0.0, min(1.0, latency_score))
    else:
        metrics['latency'] = 0.5  # Í∏∞Î≥∏Í∞í
    
    # 2. ÎèôÏ≤¥ÏõÄÏßÅÏûÑ (Îëê ÎààÎèôÏûê ÌòëÏùë) - Îàà ÎèôÍ∏∞Ìôî Ï†êÏàòÎ°ú Í≥ÑÏÇ∞
    if 'eye_sync_scores' in latest_result and len(latest_result['eye_sync_scores']) > 10:
        eye_sync_scores = latest_result['eye_sync_scores']
        avg_sync_score = sum(eye_sync_scores) / len(eye_sync_scores)
        
        # 0.9 Ïù¥ÏÉÅ: Ï†ïÏÉÅ(1.0), 0.6 Ïù¥Ìïò: ÎπÑÏ†ïÏÉÅ(0.0)
        if avg_sync_score >= 0.9:
            coordination_score = 1.0
        elif avg_sync_score <= 0.6:
            coordination_score = 0.0
        else:
            coordination_score = (avg_sync_score - 0.6) / 0.3
        metrics['coordination'] = max(0.0, min(1.0, coordination_score))
    else:
        metrics['coordination'] = 0.5  # Í∏∞Î≥∏Í∞í
    
    # 3. ÍπúÎπ°ÏûÑ Ïàò - Ï¥ù ÏõÄÏßÅÏûÑ ÏàòÎ°ú Í≥ÑÏÇ∞ (ÏïÑÏù¥Ìä∏ÎûòÌÇπ ÌÖåÏä§Ìä∏ÏóêÏÑúÎäî ÏõÄÏßÅÏûÑ Ï∂îÏ†Å)
    if 'total_movements' in latest_result:
        movements = latest_result['total_movements']
        
        # 8Ìöå Ïù¥ÏÉÅ: Ï†ïÏÉÅ(1.0), 3Ìöå Ïù¥Ìïò: ÎπÑÏ†ïÏÉÅ(0.0)
        if movements >= 8:
            movement_score = 1.0
        elif movements <= 3:
            movement_score = 0.0
        else:
            # 3-8 ÏÇ¨Ïù¥Î•º 0.0-1.0ÏúºÎ°ú Îß§Ìïë
            movement_score = (movements - 3) / 5
        metrics['blink_rate'] = movement_score
    else:
        metrics['blink_rate'] = 0.5  # Í∏∞Î≥∏Í∞í
    
    return metrics

def create_progress_bars(metrics):
    """ÏßÑÌñâÎ•† Î∞î Ï∞®Ìä∏ ÏÉùÏÑ±"""
    if not metrics:
        return None
    
    # PlotlyÎ•º ÏÇ¨Ïö©Ìïú Í∞ÄÎ°ú ÏßÑÌñâÎ•† Î∞î
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=('Î†àÏù¥ÌÑ¥Ïãú (Î∞òÏùë ÏÜçÎèÑ)', 'ÎèôÏ≤¥ÏõÄÏßÅÏûÑ (Îëê ÎààÎèôÏûê ÌòëÏùë)', 'ÏõÄÏßÅÏûÑ Ïàò'),
        vertical_spacing=0.35,
        specs=[[{"type": "bar"}], [{"type": "bar"}], [{"type": "bar"}]]
    )
    
    # Î™®ÎçòÌïú ÏÉâÏÉÅ ÌåîÎ†àÌä∏
    colors = ['#3498db', '#e74c3c', '#2ecc71']
    
    # 1. Î†àÏù¥ÌÑ¥Ïãú
    fig.add_trace(
        go.Bar(
            x=[metrics['latency'] * 100],
            y=[''],
            orientation='h',
            marker_color=colors[0],
            name='Î†àÏù¥ÌÑ¥Ïãú',
            text=f"{metrics['latency']:.1%}",
            textposition='auto',
            textfont=dict(size=16, color='white'),
            marker=dict(
                line=dict(width=0),
                pattern=dict(fillmode="overlay", size=[1], solidity=[0.3])
            )
        ),
        row=1, col=1
    )
    
    # 2. ÎèôÏ≤¥ÏõÄÏßÅÏûÑ
    fig.add_trace(
        go.Bar(
            x=[metrics['coordination'] * 100],
            y=[''],
            orientation='h',
            marker_color=colors[1],
            name='ÎèôÏ≤¥ÏõÄÏßÅÏûÑ',
            text=f"{metrics['coordination']:.1%}",
            textposition='auto',
            textfont=dict(size=16, color='white'),
            marker=dict(
                line=dict(width=0),
                pattern=dict(fillmode="overlay", size=[1], solidity=[0.3])
            )
        ),
        row=2, col=1
    )
    
    # 3. ÏõÄÏßÅÏûÑ Ïàò
    fig.add_trace(
        go.Bar(
            x=[metrics['blink_rate'] * 100],
            y=[''],
            orientation='h',
            marker_color=colors[2],
            name='ÏõÄÏßÅÏûÑ Ïàò',
            text=f"{metrics['blink_rate']:.1%}",
            textposition='auto',
            textfont=dict(size=16, color='white'),
            marker=dict(
                line=dict(width=0),
                pattern=dict(fillmode="overlay", size=[1], solidity=[0.3])
            )
        ),
        row=3, col=1
    )
    
    # Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï - ÍπîÎÅîÌïòÍ≥† Î™®ÎçòÌïòÍ≤å
    fig.update_layout(
        title=dict(
            text="ÏãúÏÑ† Î∂ÑÏÑù Í≤∞Í≥º",
            font=dict(size=20, color='#2c3e50'),
            x=0.5
        ),
        xaxis_title="Ï†ïÏÉÅÎèÑ (%)",
        height=500,
        showlegend=False,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=20, r=20, t=80, b=40),
        xaxis=dict(range=[0, 100], showgrid=False, zeroline=False),
        xaxis2=dict(range=[0, 100], showgrid=False, zeroline=False),
        xaxis3=dict(range=[0, 100], showgrid=False, zeroline=False)
    )
    
    # Í∞Å ÏÑúÎ∏åÌîåÎ°ØÏóê Í∏∞Ï§ÄÏÑ† Ï∂îÍ∞Ä - Îçî Ïó∞ÌïòÍ≤å
    for i in range(1, 4):
        fig.add_vline(x=80, line_dash="dot", line_color="#bdc3c7", line_width=0.5, row=i, col=1)
        fig.add_vline(x=60, line_dash="dot", line_color="#e8c39e", line_width=0.5, row=i, col=1)
    
    return fig

def get_encouragement_message(metrics):
    """Í≤∞Í≥ºÏóê Îî∞Î•∏ Í≤©Î†§ Î©îÏãúÏßÄ ÏÉùÏÑ±"""
    if not metrics:
        return "Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌï† Ïàò ÏóÜÏäµÎãàÎã§."
    
    # Ï†ÑÏ≤¥ Ï†êÏàò Í≥ÑÏÇ∞
    total_score = (metrics['latency'] + metrics['coordination'] + metrics['blink_rate']) / 3
    
    if total_score >= 0.8:
        return "üéâ ÌõåÎ•≠Ìï©ÎãàÎã§! ÏãúÏÑ† Î∞òÏùëÏù¥ Îß§Ïö∞ Ï†ïÏÉÅÏ†ÅÏûÖÎãàÎã§. Í±¥Í∞ïÌïú ÏÉÅÌÉúÎ•º Ïú†ÏßÄÌïòÍ≥† Í≥ÑÏÑ∏Ïöî!"
    elif total_score >= 0.6:
        return "üëç Ï¢ãÏäµÎãàÎã§! Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú Ï†ïÏÉÅÏ†ÅÏù∏ ÏãúÏÑ† Î∞òÏùëÏùÑ Î≥¥Ïù¥Í≥† ÏûàÏäµÎãàÎã§. Íæ∏Ï§ÄÌïú Í¥ÄÎ¶¨Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§."
    elif total_score >= 0.4:
        return "‚ö†Ô∏è Ï£ºÏùòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. ÏùºÎ∂Ä ÏßÄÌëúÏóêÏÑú Í∞úÏÑ†Ïùò Ïó¨ÏßÄÍ∞Ä ÏûàÏäµÎãàÎã§. Ï†ïÍ∏∞Ï†ÅÏù∏ Í≤ÄÏÇ¨Î•º Í∂åÏû•Ìï©ÎãàÎã§."
    else:
        return "üí™ ÌûòÎÇ¥ÏÑ∏Ïöî! ÌòÑÏû¨ ÏÉÅÌÉúÎ•º Ï†ïÌôïÌûà ÌååÏïÖÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§. Ï†ÑÎ¨∏ÏùòÏôÄ ÏÉÅÎã¥ÌïòÏãúÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§."

def calculate_daily_scores(results):
    """ÏùºÎ≥Ñ Ï¢ÖÌï© Ï†êÏàò Í≥ÑÏÇ∞ - Í∞ôÏùÄ ÎÇ†ÏßúÎäî Í∞ÄÏû• ÏµúÍ∑º Í≤ÉÎßå ÏÑ†ÌÉù"""
    daily_scores = []
    date_scores = {}  # ÎÇ†ÏßúÎ≥ÑÎ°ú Í∞ÄÏû• ÏµúÍ∑º Ï†êÏàò Ï†ÄÏû•
    
    for result in results:
        # ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÏóêÏÑú ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ Ï∂îÏ∂ú
        timestamp = result.get('timestamp', '')
        if timestamp:
            try:
                # 2025-08-18_22-45-01 ÌòïÏãùÏóêÏÑú ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ Ï∂îÏ∂ú
                date_str = timestamp.split('_')[0]  # 2025-08-18
                time_str = timestamp.split('_')[1]  # 22-45-01
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                time_obj = datetime.strptime(time_str, '%H-%M-%S')
                
                # 3Í∞ú ÏßÄÌëú Ï†êÏàò Í≥ÑÏÇ∞
                metrics = calculate_metrics([result])
                if metrics:
                    total_score = (metrics['latency'] + metrics['coordination'] + metrics['blink_rate']) / 3
                    
                    # Í∞ôÏùÄ ÎÇ†ÏßúÍ∞Ä ÏûàÏúºÎ©¥ Îçî ÏµúÍ∑º ÏãúÍ∞ÑÏù∏ÏßÄ ÌôïÏù∏
                    if date_str in date_scores:
                        if time_obj > date_scores[date_str]['time']:
                            # Îçî ÏµúÍ∑º ÏãúÍ∞ÑÏù¥Î©¥ ÏóÖÎç∞Ïù¥Ìä∏
                            date_scores[date_str] = {
                                'date': date_obj,
                                'score': total_score * 100,
                                'timestamp': timestamp,
                                'time': time_obj
                            }
                    else:
                        # ÏÉàÎ°úÏö¥ ÎÇ†ÏßúÎ©¥ Ï∂îÍ∞Ä
                        date_scores[date_str] = {
                            'date': date_obj,
                            'score': total_score * 100,
                            'timestamp': timestamp,
                            'time': time_obj
                        }
            except Exception as e:
                continue
    
    # ÎÇ†ÏßúÎ≥Ñ ÏµúÏã† Ï†êÏàòÎßå Ï∂îÏ∂úÌïòÏó¨ Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôò
    daily_scores = list(date_scores.values())
    
    # ÎÇ†ÏßúÏàúÏúºÎ°ú Ï†ïÎ†¨
    daily_scores.sort(key=lambda x: x['date'])
    return daily_scores

def create_trend_graph(daily_scores):
    """ÏãúÍ∞ÑÎ≥Ñ Ìä∏Î†åÎìú Í∑∏ÎûòÌîÑ ÏÉùÏÑ±"""
    if not daily_scores:
        return None
    
    # Ï≤´ Ï∏°Ï†ï Ï†êÏàòÎ•º Í∏∞Ï§ÄÏúºÎ°ú YÏ∂ï Î≤îÏúÑ ÏÑ§Ï†ï
    first_score = daily_scores[0]['score']
    
    if first_score >= 90:
        # 90Ï†ê Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞: 80~100Ï†ê Î≤îÏúÑ
        y_min, y_max = 80, 100
        y_center = 90
    else:
        # ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÏö∞: Ï≤´ Ï†êÏàò ¬±10Ï†ê Î≤îÏúÑ
        y_min = max(0, first_score - 10)
        y_max = min(100, first_score + 10)
        y_center = first_score
    
    # YÏ∂ï 20Í∞ú Ïπ∏ÏúºÎ°ú Î∂ÑÌï†
    y_range = y_max - y_min
    y_step = y_range / 20
    
    # Îç∞Ïù¥ÌÑ∞ Ìè¨Ïù∏Ìä∏ Ï§ÄÎπÑ
    dates = [score['date'] for score in daily_scores]
    scores = [score['score'] for score in daily_scores]
    
    # Plotly Í∑∏ÎûòÌîÑ ÏÉùÏÑ±
    fig = go.Figure()
    
    # ÏÑ† Í∑∏ÎûòÌîÑ Ï∂îÍ∞Ä
    fig.add_trace(go.Scatter(
        x=dates,
        y=scores,
        mode='lines+markers',
        name='Ï¢ÖÌï© Ï†êÏàò',
        line=dict(color='#1f77b4', width=4),
        marker=dict(
            size=16, 
            color='#1f77b4',
            line=dict(color='white', width=2),
            symbol='circle'
        ),
        hovertemplate='ÎÇ†Ïßú: %{x}<br>Ï†êÏàò: %{y:.1f}Ï†ê<extra></extra>'
    ))
    
    # YÏ∂ï ÏÑ§Ï†ï (20Í∞ú Ïπ∏)
    y_ticks = []
    y_tick_texts = []
    for i in range(21):  # 0~20Î≤àÏß∏ Ïπ∏
        tick_value = y_min + (i * y_step)
        y_ticks.append(tick_value)
        y_tick_texts.append(f'{tick_value:.0f}')
    
    fig.update_layout(
        title=dict(
            text="üìà ÏùºÎ≥Ñ ÏãúÏÑ† Î∂ÑÏÑù Ìä∏Î†åÎìú",
            font=dict(size=18, color='#2c3e50'),
            x=0.5
        ),
        xaxis_title="ÎÇ†Ïßú",
        yaxis_title="Ï¢ÖÌï© Ï†êÏàò",
        height=700,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=20, r=20, t=60, b=20),
        yaxis=dict(
            range=[y_min, y_max],
            tickmode='array',
            tickvals=y_ticks,
            ticktext=y_tick_texts,
            gridcolor='rgba(236, 240, 241, 0.3)',
            zeroline=False,
            showline=True,
            linecolor='#bdc3c7',
            linewidth=1
        ),
        xaxis=dict(
            gridcolor='rgba(236, 240, 241, 0.3)',
            zeroline=False,
            showline=True,
            linecolor='#bdc3c7',
            linewidth=1
        ),
        hovermode='x unified',
        hoverlabel=dict(
            bgcolor='white',
            bordercolor='#2c3e50',
            font_size=12
        )
    )
    
    # Í∏∞Ï§ÄÏÑ† Ï∂îÍ∞Ä (Ï≤´ Ï∏°Ï†ï Ï†êÏàò) - Îçî ÏÑ∏Î†®ÎêòÍ≤å
    fig.add_hline(
        y=y_center, 
        line_dash="dot", 
        line_color="#e67e22", 
        line_width=2,
        annotation=dict(
            text=f"Í∏∞Ï§ÄÏ†ê: {y_center:.0f}Ï†ê",
            font=dict(size=12, color='#e67e22'),
            bgcolor='rgba(255,255,255,0.8)',
            bordercolor='#e67e22',
            borderwidth=1
        )
    )
    
    return fig

def main():
    st.markdown('<h1 class="main-header">ÏãúÏÑ† Î∂ÑÏÑù Í≤∞Í≥º</h1>', unsafe_allow_html=True)
    
    # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    results, error = load_latest_results()
    
    if error:
        st.error(f"‚ùå {error}")
        return
    
    # ÏßÄÌëú Í≥ÑÏÇ∞
    metrics = calculate_metrics(results)
    
    if not metrics:
        st.warning("‚ö†Ô∏è ÏßÄÌëúÎ•º Í≥ÑÏÇ∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
        return
    
    # ÏßÑÌñâÎ•† Î∞î Ï∞®Ìä∏Îßå ÌëúÏãú (Î©îÏù∏ ÌôîÎ©¥)
    st.markdown("### üìä Î∂ÑÏÑù Í≤∞Í≥º")
    fig = create_progress_bars(metrics)
    if fig:
        st.plotly_chart(fig, use_container_width=True)
    
    # Í≤©Î†§ Î©îÏãúÏßÄ
    encouragement = get_encouragement_message(metrics)
    st.markdown(f"""
    <div class="encouragement-box">
        <h3>üíù Í≤©Î†§ Î©îÏãúÏßÄ</h3>
        <p style="font-size: 1.2rem;">{encouragement}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Ìä∏Î†åÎìú Í∑∏ÎûòÌîÑ Ï∂îÍ∞Ä - ÍπîÎÅîÌïú ÏÑπÏÖòÏúºÎ°ú
    st.markdown("<div class='trend-section'>", unsafe_allow_html=True)
    st.markdown("### üìà ÏùºÎ≥Ñ Ìä∏Î†åÎìú")
    
    # ÏùºÎ≥Ñ Ï†êÏàò Í≥ÑÏÇ∞
    daily_scores = calculate_daily_scores(results)
    
    if daily_scores:
        # 1Îã¨(30Ïùº) Ïù¥ÎÇ¥ Îç∞Ïù¥ÌÑ∞Îßå ÌïÑÌÑ∞ÎßÅ
        from datetime import timedelta
        current_date = datetime.now()
        month_ago = current_date - timedelta(days=30)
        
        recent_scores = [score for score in daily_scores if score['date'] >= month_ago]
        
        if recent_scores:
            trend_fig = create_trend_graph(recent_scores)
            if trend_fig:
                st.plotly_chart(trend_fig, use_container_width=True)
                
                # Í∑∏ÎûòÌîÑ ÏïÑÎûò Ï†ïÎ≥¥ ÌëúÏãú - Îçî ÍπîÎÅîÌïòÍ≤å
                col_info1, col_info2 = st.columns(2)
                with col_info1:
                    st.markdown(f"**üìä Î∂ÑÏÑù Í∏∞Í∞Ñ**: {recent_scores[0]['date'].strftime('%Y-%m-%d')} ~ {recent_scores[-1]['date'].strftime('%Y-%m-%d')}")
                with col_info2:
                    st.markdown(f"**üìà Ï¥ù Ï∏°Ï†ï ÌöüÏàò**: {len(recent_scores)}Ìöå")
        else:
            st.info("üìÖ ÏµúÍ∑º 1Îã¨Í∞ÑÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        st.info("üìä Ìä∏Î†åÎìú Î∂ÑÏÑùÏùÑ ÏúÑÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.")
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Ïö∞Ï∏° ÌïòÎã®Ïóê ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î≤ÑÌäº Î∞∞Ïπò
    st.markdown("<br>", unsafe_allow_html=True)
    
    # 3Ïó¥Î°ú ÎÇòÎàÑÏñ¥ Ï§ëÏïôÏóê Î≤ÑÌäº Î∞∞Ïπò
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üìä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î≥¥Í∏∞", key="detail_button", use_container_width=True, help="ÏÉÅÏÑ∏Ìïú Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï©ÎãàÎã§"):
            st.session_state.show_details = True
    
    # ÏÉÅÏÑ∏ Ï†ïÎ≥¥Í∞Ä ÌëúÏãúÎêòÏñ¥Ïïº ÌïòÎäî Í≤ΩÏö∞
    if st.session_state.get('show_details', False):
        st.markdown("---")
        st.markdown("### üìã ÏÉÅÏÑ∏ Î∂ÑÏÑù Ï†ïÎ≥¥")
        
        # ÏàòÏπò Í≤∞Í≥º ÌëúÏãú
        detail_col1, detail_col2, detail_col3 = st.columns(3)
        
        with detail_col1:
            st.metric("Î†àÏù¥ÌÑ¥Ïãú", f"{metrics['latency']:.1%}", "Î∞òÏùë ÏÜçÎèÑ")
        
        with detail_col2:
            st.metric("ÎèôÏ≤¥ÏõÄÏßÅÏûÑ", f"{metrics['coordination']:.1%}", "Îëê Îàà ÌòëÏùë")
        
        with detail_col3:
            st.metric("ÏõÄÏßÅÏûÑ Ïàò", f"{metrics['blink_rate']:.1%}", "ÏõÄÏßÅÏûÑ Ï∂îÏ†Å")
        
        # Îç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥
        if results:
            latest = results[0]  # ÏµúÏã† Îç∞Ïù¥ÌÑ∞
            st.markdown("#### üìä ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞")
            st.write(f"**Î∂ÑÏÑù ÏãúÍ∞Ñ**: {latest.get('timestamp', 'Ïïå Ïàò ÏóÜÏùå')}")
            st.write(f"**Î∞òÏùë ÏãúÍ∞Ñ**: {len(latest.get('reaction_times', []))}Í∞ú")
            st.write(f"**ÏõÄÏßÅÏûÑ ÌöüÏàò**: {latest.get('total_movements', 0)}Ìöå")
            
            # Î∞òÏùë ÏãúÍ∞Ñ ÏÉÅÏÑ∏
            if 'reaction_times' in latest:
                st.write(f"**Î∞òÏùë ÏãúÍ∞ÑÎì§**: {[f'{x:.3f}Ï¥à' for x in latest['reaction_times']]}")
                st.write(f"**ÌèâÍ∑† Î∞òÏùë ÏãúÍ∞Ñ**: {sum(latest['reaction_times']) / len(latest['reaction_times']):.3f}Ï¥à")
            
            # Îàà ÎèôÍ∏∞Ìôî Ï†êÏàò ÏÉÅÏÑ∏
            if 'eye_sync_scores' in latest:
                st.write(f"**ÌèâÍ∑† ÎèôÍ∏∞Ìôî Ï†êÏàò**: {sum(latest['eye_sync_scores']) / len(latest['eye_sync_scores']):.3f}")
        
        # ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ïà®Í∏∞Í∏∞ Î≤ÑÌäº
        if st.button("üìä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ïà®Í∏∞Í∏∞", key="hide_detail_button"):
            st.session_state.show_details = False
            st.rerun()

if __name__ == "__main__":
    main()
